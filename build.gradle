plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version "7.0.+"
}

version = "${mod_version}"
group = "net.commoble.${modid}"
base {
	archivesName = "${modid}-${mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
	main
	examplemod { runs { modIdentifier "databuddy" } }
	generated
}


// Include resources generated by data generators.
sourceSets.examplemod.resources { srcDir 'src/generated/resources' }
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	examplemodCompileClasspath.extendsFrom(compileClasspath)
	examplemodRuntimeClasspath.extendsFrom(runtimeClasspath)
}

runs {
	configureEach {
		systemProperty 'forge.logging.console.level', 'debug'
		modSources.add project.sourceSets.main, project.sourceSets.examplemod
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}
	
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	clientData {
		arguments.addAll '--mod', project.modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

repositories {
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
	examplemodImplementation sourceSets.main.output
	
    //implementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.7.0'
	//testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
	//testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}
test {
	useJUnitPlatform()
}

java
{
	withSourcesJar()
	withJavadocJar()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}",
			"FMLModType": "GAMELIBRARY"
        ])
    }
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
			artifact sourcesJar
			artifact javadocJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

