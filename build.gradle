
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'

version = "${mod_version}"
group = "commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
	main
	examplemod
	generated
	test
}

minecraft {
    mappings channel: 'official', version: "${mc_version}"    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
	// these run configs allow the examplemod to be run in a forge-ready workspace
	// the examplemod sourceset must be first for these to work
	// the examplemod does not become built into the final jar
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                databuddy {
                    source sourceSets.examplemod
					source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                databuddy {
                    source sourceSets.examplemod
					source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'databuddy', '--all', '--output', file('src/generated/resources/')

            mods {
                databuddy {
                    source sourceSets.examplemod
					source sourceSets.main
                }
            }
        }
    }
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.7.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}
test {
	useJUnitPlatform()
}

java
{
	withSourcesJar()
	withJavadocJar()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}",
			"FMLModType": "GAMELIBRARY"
        ])
    }
}

["codec", "config", "data", "datagen", "nbt", "plugin"].forEach(x -> {
	tasks.create(name: "${x}Jar", type: Jar) {
		classifier = x
		from sourceSets.main.output
		include "commoble/databuddy/${x}/**"
	    manifest {
	        attributes([
	            "Specification-Title": "${modid}",
	            "Specification-Vendor": "Commoble",
	            "Specification-Version": "1", // We are version 1 of ourselves
	            "Implementation-Title": project.name,
	            "Implementation-Version": "${project.version}",
	            "Implementation-Vendor" :"Commoble",
	            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}",
				"FMLModType": "GAMELIBRARY"
	        ])
    }
	}
})

artifacts {
	archives javadocJar
	archives sourcesJar
	archives codecJar
	archives configJar
	archives dataJar
	archives datagenJar
	archives nbtJar
	archives pluginJar
}

jar.finalizedBy('reobfJar') 

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
			artifact sourcesJar
			artifact javadocJar
			artifact codecJar
			artifact configJar
			artifact dataJar
			artifact datagenJar
			artifact nbtJar
			artifact pluginJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}
