
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
	main
	test
	lib
}

configurations {
	libCompile.extendsFrom(compile)
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                databuddy {
                    source sourceSets.main
					source sourceSets.lib
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                databuddy {
                    source sourceSets.main
					source sourceSets.lib
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'modid', '--all', '--output', file('src/generated/resources/')

            mods {
                databuddy {
                    source sourceSets.main
                    source sourceSets.lib
                }
            }
        }
    }
}

repositories {
	maven { url 'https://www.dogforce-games.com/maven/' }
	maven {  url "https://maven.tterrag.com/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation sourceSets.lib.output

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.lib.output.classesDirs
	from sourceSets.lib.output.resourcesDir
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}"
        ])
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.lib.allJava
}

task libJar(type: Jar) {
	classifier = "lib"
	from sourceSets.lib.output
	from sourceSets.lib.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives libJar
}

jar.finalizedBy('reobfJar') 

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
			artifact libJar
			artifact sourcesJar
			artifact javadocJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}
